/* --- Start of 404.php --- */
include 'header.php'; ?>

<div class="fourzerofour-container">
    <main>
        <section>
        <h1>Oops! Page Not Found</h1>
        <p>We couldn't locate the page you were looking for. It might have been moved or deleted.</p>
        </section>
    </main>
</div>
<?php include 'footer.php';

/* --- End of 404.php --- */

/* --- Start of about.php --- */
include 'header.php'; ?>
<div class="main-container">
    <main>
        <section>
            <h2>About Us</h2>
            <p id="intro-text">Welcome to our community! We are dedicated to spreading and understanding the Word of God. Our journey began many years ago, rooted in a passion for faith and a desire to bring people closer to the divine.</p>
            <div id="more-info" style="display: none;">
                <h3>Our Mission</h3>
                <p>Our mission is to create a space where everyone feels welcome and valued. We believe in the power of community, and our goal is to provide a nurturing environment for spiritual growth, learning, and fellowship. Through our services, outreach programs, and events, we aim to inspire and support each other in our walk of faith.</p>

                <h3>Our History</h3>
                <p>Founded in 2024, our community has grown from a small group of like-minded individuals to a vibrant community of truth-seekers. Over the years, we have expanded our reach through various ministries and initiatives, always staying true to our core values of love, respect, and compassion.</p>

                <h3>What We Offer</h3>
                <ul>
                    <li><strong>Weekly Content:</strong> Join us every week for uplifting and engaging articles and insights into Biblical teachings and events.</li>
                    <li><strong>Bible Studies:</strong> Deepen your understanding of the scriptures with our regular Bible study sessions.</li>
                    <li><strong>Community Outreach:</strong> We are committed to serving the global community through various outreach programs.</li>
                </ul>

                <h3>Meet Our Team</h3>
                <p>Our dedicated team is here to guide, support, and inspire you. Meet our leadership:</p>
                <ul id="team-list">
                    <li><strong>Samuel Mason Jr</strong> - Lead Designer</li>
                    <li><strong>CaribbeanSkies</strong> - Lead Editor</li>
                </ul>

                <h3>Testimonials</h3>
                <div class="testimonial-slider">
                    <div class="testimonial">
                        <p>"This website has truly changed my life. The knowledge in the truth I've received here is incredible."</p>
                        <p>- Sarah K.</p>
                    </div>
                    <div class="testimonial">
                        <p>"A wonderful place to grow in faith and connect with God as well as the truth."</p>
                        <p>- Michael B.</p>
                    </div>
                    <div class="testimonial">
                        <p>"The Bible studies are enlightening, and the articles are always enlightening. I'm so glad I found this community."</p>
                        <p>- Laura T.</p>
                    </div>
                </div>
            </div>
            <button id="toggle-info" class="cool-button">Learn More</button>
        </section>
    </main>
</div>
<?php include 'footer.php'; ?>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const introText = document.getElementById('intro-text');
        const moreInfo = document.getElementById('more-info');
        const toggleButton = document.getElementById('toggle-info');
        const testimonials = document.querySelectorAll('.testimonial');
        let currentTestimonial = 0;

        toggleButton.addEventListener('click', function() {
            if (moreInfo.style.display === 'none') {
                moreInfo.style.display = 'block';
                toggleButton.textContent = 'Show Less';
                introText.classList.add('fade-out');
                moreInfo.classList.add('fade-in');
                startTestimonialSlider();
            } else {
                moreInfo.style.display = 'none';
                toggleButton.textContent = 'Learn More';
                introText.classList.remove('fade-out');
            }
        });

        function startTestimonialSlider() {
            testimonials.forEach((testimonial, index) => {
                testimonial.style.display = index === currentTestimonial ? 'block' : 'none';
            });

            setInterval(() => {
                testimonials[currentTestimonial].style.display = 'none';
                currentTestimonial = (currentTestimonial + 1) % testimonials.length;
                testimonials[currentTestimonial].style.display = 'block';
            }, 5000); // Change testimonial every 5 seconds
        }

        // Adding some smooth scrolling for a cool effect
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function(e) {
                e.preventDefault();

                document.querySelector(this.getAttribute('href')).scrollIntoView({
                    behavior: 'smooth'
                });
            });
        });
    });

    // Simple fade in/out animations
    const fadeOutAnimation = `
        @keyframes fadeOut {
            from { opacity: 1; }
            to { opacity: 0; }
        }
    `;
    const fadeInAnimation = `
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
    `;
    const style = document.createElement('style');
    style.textContent = `
        .fade-out { animation: fadeOut 1s forwards; }
        .fade-in { animation: fadeIn 1s forwards; }
        .testimonial { display: none; animation: fadeIn 1s forwards; }
        ${fadeOutAnimation}
        ${fadeInAnimation}
    `;
    document.head.appendChild(style);
</script>

<style>
    .cool-button {
        background-color: #4CAF50;
        color: white;
        padding: 10px 20px;
        border: none;
        cursor: pointer;
        font-size: 16px;
        transition: background-color 0.3s ease;
    }

    .cool-button:hover {
        background-color: #45a049;
    }

    .fade-in {
        animation: fadeIn 1s forwards;
    }

    .fade-out {
        animation: fadeOut 1s forwards;
    }

    .testimonial-slider {
        margin-top: 20px;
        border-top: 1px solid #ddd;
        padding-top: 20px;
    }

    .testimonial {
        text-align: center;
        font-style: italic;
        color: #555;
    }

    #team-list {
        list-style-type: none;
        padding: 0;
    }

    #team-list li {
        padding: 5px 0;
    }

    ul {
        padding-left: 20px;
    }

    h3 {
        margin-top: 30px;
    }
</style>


/* --- End of about.php --- */

/* --- Start of archive.php --- */
include 'header.php';
require 'includes/database.php';

// Set default posts per page
$default_posts_per_page = 10;

// Get the selected number of posts per page from the dropdown, or use the default
$posts_per_page = isset($_GET['posts_per_page']) ? (int)$_GET['posts_per_page'] : $default_posts_per_page;

// Get the current page number from the URL, default to 1 if not set
$page = isset($_GET['page']) ? (int)$_GET['page'] : 1;

// Calculate the offset for the SQL query
$offset = ($page - 1) * $posts_per_page;

// Fetch the total number of posts
$total_posts_query = "SELECT COUNT(*) FROM posts";
$total_posts_result = $pdo->query($total_posts_query);
$total_posts = $total_posts_result->fetchColumn();

// Fetch posts for the current page
$query = "SELECT posts.id, posts.title, posts.thumbnail, users.displayname AS author, posts.created_at 
          FROM posts
          JOIN users ON posts.user_id = users.id
          ORDER BY posts.id DESC
          LIMIT $posts_per_page OFFSET $offset";
$posts = $pdo->query($query);
?>

<div class="main-container">
    <main>
        <section>
            <h2>Archive</h2>
            <form method="GET" action="archive.php">
                <label for="posts_per_page">Posts per page:</label>
                <select id="posts_per_page" name="posts_per_page" onchange="this.form.submit()">
                    <option value="10" <?php if ($posts_per_page == 10) echo 'selected'; ?>>10</option>
                    <option value="20" <?php if ($posts_per_page == 20) echo 'selected'; ?>>20</option>
                    <option value="30" <?php if ($posts_per_page == 30) echo 'selected'; ?>>30</option>
                    <option value="100" <?php if ($posts_per_page == 100) echo 'selected'; ?>>100</option>
                </select>
            </form>
            <ul class="archive-list">
                <?php
                while ($post = $posts->fetch(PDO::FETCH_ASSOC)) {
                    echo '<li class="archive-item">';
                    if ($post['thumbnail']) {
                        // Adjust the path if necessary
                        $thumbnailPath = str_replace('../', '/', $post['thumbnail']);
                        echo '<img src="' . htmlspecialchars($thumbnailPath) . '" alt="' . htmlspecialchars($post['title']) . ' Thumbnail" class="archive-thumbnail">';
                    }
                    echo '<div class="archive-details">';
                    echo '<a href="post.php?id=' . $post['id'] . '">' . htmlspecialchars($post['title']) . '</a>';
                    echo '<br>';
                    echo 'by ' . htmlspecialchars($post['author']);
                    echo ' on ' . date('F j, Y', strtotime($post['created_at']));
                    echo '</div>';
                    echo '</li>';
                }
                ?>
            </ul>
            <div class="pagination">
                <?php
                $total_pages = ceil($total_posts / $posts_per_page);
                if ($page > 1) {
                    echo '<a href="?page=' . ($page - 1) . '&posts_per_page=' . $posts_per_page . '">Previous</a>';
                }
                if ($page < $total_pages) {
                    echo '<a href="?page=' . ($page + 1) . '&posts_per_page=' . $posts_per_page . '">Next</a>';
                }
                ?>
            </div>
        </section>
    </main>
</div>

<!-- Link your updated CSS file -->
<link rel="stylesheet" href="path/to/your/archive.css">

<?php include 'footer.php';

/* --- End of archive.php --- */

/* --- Start of base_config.php --- */
// Define base URL
define('BASE_URL', '/'); // Adjust the path as needed depending on your server setup

// Define base directory path
define('BASE_DIR', __DIR__ . '/');

set_include_path(__DIR__);

/* --- End of base_config.php --- */

/* --- Start of contact.php --- */
include 'header.php'; ?>

<div class="contact-container">
    <main>
        <div class="contact-us">
            <section>
                <h2>Contact Us</h2>
                <p>We'd love to hear from you! Whether you have a question, feedback, or just want to say hello, feel free to reach out using the form below.</p>

                <?php
                if ($_SERVER["REQUEST_METHOD"] == "POST") {
                    $first_name = htmlspecialchars($_POST['first_name']);
                    $last_name = htmlspecialchars($_POST['last_name']);
                    $email = htmlspecialchars($_POST['email']);
                    $message = htmlspecialchars($_POST['message']);

                    $to = 'admin@divineword.co.uk'; // Your email address
                    $subject = 'New Contact Form Submission';

                    $body = "You have received a new message from your website contact form.\n\n" .
                        "Here are the details:\n" .
                        "First Name: $first_name\n" .
                        "Last Name: $last_name\n" .
                        "Email: $email\n\n" .
                        "Message:\n$message";

                    $headers = "From: $email\r\n";
                    $headers .= "Reply-To: $email\r\n";

                    if (mail($to, $subject, $body, $headers)) {
                        echo "<p class='message success'>Thank you for contacting us, $first_name. We will get back to you shortly.</p>";
                    } else {
                        echo "<p class='message error'>Sorry, something went wrong. Please try again later.</p>";
                    }
                }
                ?>

                <form action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>" method="POST">
                    <div>
                        <label for="first_name">First Name:</label>
                        <input type="text" id="first_name" name="first_name" required>
                    </div>

                    <div>
                        <label for="last_name">Last Name:</label>
                        <input type="text" id="last_name" name="last_name" required>
                    </div>

                    <div>
                        <label for="email">Email:</label>
                        <input type="email" id="email" name="email" required>
                    </div>

                    <div>
                        <label for="message">Your Message:</label>
                        <textarea id="message" name="message" rows="5" required></textarea>
                    </div>

                    <div>
                        <button type="submit">Send Message</button>
                    </div>
                </form>
            </section>
        </div>
    </main>
</div>

<?php include 'footer.php';

/* --- End of contact.php --- */

/* --- Start of footer.php --- */
$footerLinks = [
    [
        'url' => '/archive.php',
        'text' => 'All Posts',
        'thumbnail' => ''
    ],
    [
        'url' => '#',
        'text' => 'Link 2',
        'thumbnail' => ''
    ],
    [
        'url' => '#',
        'text' => 'Link 3',
        'thumbnail' => ''
    ]
];
?>

<footer style="background-image: url('/images/footer.jpg');">
    <?php if (!isset($_SESSION['username'])) : ?>
        <p>Not registered yet? <a href="/register.php"><span class="registerl">Register here</span></a></p>
    <?php endif; ?>
    <p>&copy; <?php echo date("Y"); ?> DivineWord Community. All rights reserved.</p>

    <!-- Footer Links with Design -->
    <div class="footer-links">
        <ul>
            <?php foreach ($footerLinks as $link) : ?>
                <li>
                    <?php if ($link['thumbnail']) : ?>
                        <div class="footer-link-item">
                            <img src="<?php echo $link['thumbnail']; ?>" alt="<?php echo $link['text']; ?>" class="footer-thumbnail">
                            <a href="<?php echo $link['url']; ?>"><?php echo $link['text']; ?></a>
                        </div>
                    <?php else : ?>
                        <div class="footer-link-item">
                            <a href="<?php echo $link['url']; ?>"><?php echo $link['text']; ?></a>
                        </div>
                    <?php endif; ?>
                </li>
            <?php endforeach; ?>
        </ul>
    </div>
</footer>
</body>

</html>

<?php if ($current_page == 'index') : ?>
    <script src="/js/post-preview.js"></script>
<?php endif; ?>
<?php if ($current_page == 'manage_users') : ?>
    <script src="/js/manage_users.js"></script>
<?php endif; ?>
<?php if ($current_page == 'members') : ?>
    <script src="/js/roster.js"></script>
<?php endif; ?>
<?php if ($current_page == 'post') : ?>
    <script src="/js/tools.js"></script>
<?php endif;

/* --- End of footer.php --- */

/* --- Start of header.php --- */
require_once 'includes/session.php';
require_once 'base_config.php';
include_once 'includes/notifications/notification_data.php';

ini_set('display_errors', 1);
error_reporting(E_ALL);

// Handle logout action
if (isset($_GET['logout'])) {
    session_destroy();  // Destroy all session data
    header("Location: /login.php"); // Redirect to the login page after logout
    exit();
}
?>
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <?php include 'includes/stylesheets.php'; ?>

    <script src="/js/script.js"></script>
    <title>Divine Word</title>
    <script>
        // Function to toggle notifications dropdown
        function toggleNotifications(event) {
            event.stopPropagation();  // Stop the click event from propagating to the document
            const dropdown = document.querySelector('.notifications-dropdown');
            const isVisible = dropdown.style.display === 'block';

            // Close any open dropdown first
            closeAllDropdowns();

            // Toggle the current dropdown
            dropdown.style.display = isVisible ? 'none' : 'block';
        }

        // Function to close all dropdowns
        function closeAllDropdowns() {
            const dropdowns = document.querySelectorAll('.notifications-dropdown');
            dropdowns.forEach(dropdown => {
                dropdown.style.display = 'none';
            });
        }

        // Event listener to close the dropdown if clicking outside
        document.addEventListener('click', function(event) {
            const dropdown = document.querySelector('.notifications-dropdown');
            const button = document.querySelector('.notifications-button');

            if (dropdown && !dropdown.contains(event.target) && !button.contains(event.target)) {
                dropdown.style.display = 'none';
            }
        });

        // Attach the toggle function to the notifications button
        document.addEventListener('DOMContentLoaded', function() {
            document.querySelector('.notifications-button').addEventListener('click', toggleNotifications);
        });

        // Function to handle logout redirection
        function logout() {
            window.location.href = '?logout=true';
        }
    </script>
</head>

<body>
    <header style="background-image: url('/images/banner.jpg');">
        <div class="header-content">
            <div class="logo">
                <img src="/images/logo.png" alt="Logo">
            </div>
            <div class="user-info">
                <div class="search-bar">
                    <form action="/search.php" method="GET">
                        <input type="text" name="query" placeholder="Search...">
                        <button type="submit">Search</button>
                    </form>
                </div>
                <?php
                if (isset($_SESSION['username'])) {
                    $user_id = $_SESSION['user_id']; // Assuming user_id is stored in session
                    $notifications = get_notifications($user_id);
                    $notification_count = count($notifications);
                ?>
                    <span>Hello, <?php echo htmlspecialchars($_SESSION['username'], ENT_QUOTES, 'UTF-8'); ?>
                        <a class="notifications-button" href="javascript:void(0);" onclick="toggleNotifications()">
                            <span class="notification-count">(<?php echo htmlspecialchars($notification_count, ENT_QUOTES, 'UTF-8'); ?>)</span>
                        </a>
                    </span>
                    <div class="notifications-dropdown">
                        <?php
                        if ($notification_count > 0) {
                            foreach ($notifications as $notification) {
                                echo "<div class='notification'>";
                                echo "<a href='/notifications.php'>";
                                echo "<strong>" . htmlspecialchars($notification['title'], ENT_QUOTES, 'UTF-8') . "</strong><br>";
                                echo htmlspecialchars_decode($notification['message']);
                                echo "</a>";
                                echo "</div>";
                            }
                        } else {
                            echo "<div class='notification'>";
                            echo "<a href='/notifications.php'>";
                            echo "No new notifications";
                            echo "</a>";
                            echo "</div>";
                        }
                        ?>
                    </div>
                    <button class="auth-button" onclick="logout()">Logout</button>
                <?php
                } else {
                ?>
                    <button class="auth-button" onclick="window.location.href='/login.php'">Login</button>
                <?php
                }
                ?>
            </div>
        </div>
        <div class="hamburger" onclick="document.querySelector('.nav-links').classList.toggle('active')">☰</div> <!-- Hamburger Icon -->
        <nav>
            <ul class="nav-links">
                <li><a href="/index.php">Home</a></li>
                <?php if (isset($_SESSION['user_role']) && in_array($_SESSION['user_role'], ['admin', 'editor'])) : ?>
                    <li><a href='/admin/admin_panel.php'>Admin</a></li>
                <?php endif; ?>
                <?php if (isset($_SESSION['user_id']) && in_array($_SESSION['user_role'], ['admin', 'editor', 'member'])) : ?>
                    <li><a href='/userportal/user_portal.php'>User Portal</a></li>
                <?php endif; ?>
                <li><a href='/members.php'>Members</a></li>
                <li><a href='/contact.php'>Contact Us</a></li>
                <li><a href='/about.php'>About</a></li>
            </ul>
        </nav>
    </header>


/* --- End of header.php --- */

/* --- Start of index.php --- */
include 'header.php'; ?>

<?php
// Database connection, function, and setup code

// Function to determine the current issue based on the current date
function getCurrentIssue()
{
    $month = date('n');  // Current month as a number (1-12)
    $year = date('Y');   // Current year

    switch ($month) {
        case 1:
        case 2:
            return "January-February $year";
        case 3:
        case 4:
            return "March-April $year";
        case 5:
        case 6:
            return "May-June $year";
        case 7:
        case 8:
            return "July-August $year";
        case 9:
        case 10:
            return "September-October $year";
        case 11:
        case 12:
            return "November-December $year";
        default:
            return "Unknown Issue";
    }
}

function getUserClass($user_role)
{
    switch ($user_role) {
        case 'admin':
        case 'owner':
            return 'admin-owner';
        case 'editor':
            return 'editor-user';
        default:
            return 'regular-user';
    }
}

// Calculate the current issue before starting the main HTML output
$issue = getCurrentIssue();

// Truncate content function for limiting post content preview length
function truncateContent($content, $limit = 100)
{
    $content = strip_tags($content); // Remove HTML tags
    return strlen($content) > $limit ? substr($content, 0, $limit) . '...' : $content;
}
?>

<div class="main-container">
    <main>
        <section>
            <h2>Welcome to the Divine Word Community</h2>
            <p>This is the home of the Christian community, part of the little flock, The Church of God, where we share insights, teachings, and fellowship together.</p>
            <hr>
            <div class="carousel-container">
                <div class="carousel-button-row mobile-only">
                    <button class="carousel-button prev" onclick="prevSlide()" aria-label="Previous slide">
                        <svg viewBox="0 0 24 24" width="32" height="32" aria-hidden="true">
                            <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z" />
                        </svg>
                    </button>
                    <button class="carousel-button next" onclick="nextSlide()" aria-label="Next slide">
                        <svg viewBox="0 0 24 24" aria-hidden="true">
                            <path d="M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6z" />
                        </svg>
                    </button>
                </div>
                <div class="carousel">
                    <div class="carousel-slides">
                        <?php
                        require 'includes/database.php';
                        // Removed LIMIT clause to fetch all posts
                        $query = "SELECT posts.id, posts.title, posts.thumbnail, posts.content, users.displayname AS author, users.role AS user_role, COUNT(comments.id) AS comment_count FROM posts
                                  JOIN users ON posts.user_id = users.id
                                  LEFT JOIN comments ON posts.id = comments.post_id
                                  GROUP BY posts.id
                                  ORDER BY posts.id DESC";
                        $posts = $pdo->query($query);
                        $count = 0;
                        while ($post = $posts->fetch(PDO::FETCH_ASSOC)) {
                            if ($count % 6 == 0) {
                                if ($count > 0) {
                                    echo '</div>'; // Close previous slide
                                }
                                echo '<div class="carousel-slide grid-container"">'; // Start new slide
                            }
                            $userClass = getUserClass($post['user_role']);
                            echo '<div class="post-preview">';
                            echo '<a href="post.php?id=' . $post['id'] . '" style="text-decoration: none; color: black;">';
                            if ($post['thumbnail']) {
                                echo '<img src="' . $post['thumbnail'] . '" alt="Post thumbnail" class="post-thumbnail">';
                            }
                            echo '<h3>' . htmlspecialchars_decode($post['title']) . '</h3>';
                            echo '<p>By <span class="' . $userClass . '">' . htmlspecialchars_decode($post['author']) . '</span></p>';
                            $truncatedContent = truncateContent(htmlspecialchars_decode($post['content']), 100);
                            echo '<div class="content-preview" data-content="' . $truncatedContent . '"></div>';
                            echo '<p class="comment-count">' . $post['comment_count'] . ' Comments</p>';
                            echo '</a>';
                            echo '</div>';
                            $count++;
                        }
                        if ($count > 0) {
                            echo '</div>'; // Close last slide
                        }
                        ?>
                    </div>
                </div>
                <div class="carousel-button-row mobile-only">
                    <button class="carousel-button prev" onclick="prevSlide()" aria-label="Previous slide">
                        <svg viewBox="0 0 24 24" width="32" height="32" aria-hidden="true">
                            <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z" />
                        </svg>
                    </button>
                    <button class="carousel-button next" onclick="nextSlide()" aria-label="Next slide">
                        <svg viewBox="0 0 24 24" aria-hidden="true">
                            <path d="M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6z" />
                        </svg>
                    </button>
                </div>
            </div>
            <hr>
            <?php
            // Fetch the video link from a text file (or database)
            $video_link = '';
            $video_file = 'includes/featured_video.txt';
            if (file_exists($video_file)) {
                $video_link = trim(file_get_contents($video_file));
            }
            ?>

            <!-- Featured Video of the Week -->
            <div class="featured-video">
                <h2>Featured Video of the Week</h2>
                <?php if (!empty($video_link)) : ?>
                    <iframe width="560" height="315" src="<?php echo $video_link; ?>" frameborder="0" allowfullscreen></iframe>
                <?php else : ?>
                    <p>No featured video this week. Check back later!</p>
                <?php endif; ?>
            </div>
        </section>
    </main>
    <aside class="sidebar">
        <h3>External Magazines</h3>
        <h4><?php echo htmlspecialchars($issue); ?></h4>
        <ul>
            <?php
            // Fetch and display the latest articles for the current issue
            $stmt = $pdo->prepare("SELECT title, author, image_url, article_url FROM magazine_articles WHERE issue = :issue ORDER BY id DESC LIMIT 3");
            $stmt->bindParam(':issue', $issue);
            $stmt->execute();
            $results = $stmt->fetchAll(PDO::FETCH_ASSOC);

            if (count($results) > 0) :
                foreach ($results as $row) :
            ?>
                    <li>
                        <img src="<?php echo htmlspecialchars($row['image_url']); ?>" alt="<?php echo htmlspecialchars($row['title']); ?>" class="thumbnail">
                        <a href="<?php echo htmlspecialchars($row['article_url']); ?>"><?php echo htmlspecialchars($row['title']); ?></a><br>
                        <small><?php echo htmlspecialchars($row['author']); ?></small>
                    </li>
                <?php
                endforeach;
            else :
                ?>
                <li>No articles available for this issue.</li>
            <?php endif; ?>
        </ul>
        <a href="magazines/all_issues.php" class="view-all">VIEW ALL</a>
    </aside>
</div>

<script>
    let currentSlide = 0;
    const slides = document.querySelectorAll('.carousel-slide');

    function showSlide(index) {
        const totalSlides = slides.length;
        if (index < 0) {
            currentSlide = totalSlides - 1;
        } else if (index >= totalSlides) {
            currentSlide = 0;
        } else {
            currentSlide = index;
        }
        const carouselSlides = document.querySelector('.carousel-slides');
        carouselSlides.style.transform = 'translateX(' + (-currentSlide * 100) + '%)';
    }

    function nextSlide() {
        showSlide(currentSlide + 1);
    }

    function prevSlide() {
        showSlide(currentSlide - 1);
    }
</script>

<?php include 'footer.php';

/* --- End of index.php --- */

/* --- Start of login.php --- */
include 'includes/config.php';
include 'includes/database.php';
session_start();

$error_message = ''; // Initialize the error message variable

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $username = htmlspecialchars($_POST['username']);
    $password = htmlspecialchars($_POST['password']);

    $stmt = $pdo->prepare("SELECT * FROM users WHERE username = ?");
    $stmt->execute([$username]);

    if ($stmt->rowCount() > 0) {
        $user = $stmt->fetch(PDO::FETCH_ASSOC);
        if (password_verify($password, $user['password'])) {
            $_SESSION['user_id'] = $user['id'];
            $_SESSION['username'] = $user['username'];
            $_SESSION['displayname'] = $user['displayname'];
            $_SESSION['user_role'] = $user['role'];
            header("Location: index.php");
            exit;
        } else {
            $error_message = "Incorrect password!";
        }
    } else {
        $error_message = "User does not exist!";
    }
}
include 'header.php';
?>
<div class="login-form">
    <form method="POST" action="login.php">
        <h2 style="text-align: center;">Login</h2>
        <?php if ($error_message != ''): ?>
            <p style="color: red; text-align: center;"><?php echo $error_message; ?></p>
        <?php endif; ?>
        <div style="margin-bottom: 20px;">
            <label for="username">Username:</label>
            <input type="text" id="username" name="username" required>
        </div>
        <div style="margin-bottom: 20px;">
            <label for="password">Password:</label>
            <input type="password" id="password" name="password" required>
        </div>
        <div style="text-align: center;">
            <button type="submit">Login</button>
        </div>
    </form>
</div>
<?php include 'footer.php';

/* --- End of login.php --- */

/* --- Start of members.php --- */
include 'header.php'; ?>

<div class="main-container">
    <main>
        <div class="roster-container">
            <form id="searchForm" class="search-form">
                <input type="text" id="searchQuery" placeholder="Search users...">
                <button type="submit">Search</button>
            </form>
            <div id="searchResults"></div>
            <table id="rosterTable" class="roster-table">
                <thead>
                    <tr>
                        <th>Username</th>
                        <th>Display Name</th>
                        <th>Role</th>
                        <th>Devotion</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Rows will be populated by JavaScript -->
                </tbody>
            </table>
            <p class="notice">These members have been displayed for testing purposes. Other members have been hidden due to privacy concerns.</p>
        </div>
    </main>
</div>

<?php include 'footer.php';

/* --- End of members.php --- */

/* --- Start of notifications.php --- */
include_once 'includes/notifications/notification_data.php';

if (session_status() == PHP_SESSION_NONE) {
    session_start();
}

if (!isset($_SESSION['username'])) {
    header('Location: login.php');
    exit();
}

$user_id = $_SESSION['user_id'];

if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['remove_notification_id'])) {
    $notification_id = $_POST['remove_notification_id'];
    remove_notification($notification_id, $user_id);
}

$notifications_list = get_notifications($user_id, true); // Fetch all notifications
?>

<?php include 'header.php'; ?>
<div class="container">
    <h2>Your Notifications</h2>
    <?php
    if (count($notifications_list) > 0) {
        foreach ($notifications_list as $notification) {
            echo "<div class='notification-main'>";
            echo "<strong>" . htmlspecialchars($notification['title']) . "</strong><br>";
            echo htmlspecialchars_decode($notification['message']) . " - " . htmlspecialchars($notification['created_at']);
            echo "<form method='POST' style='display:inline;'>
                    <input type='hidden' name='remove_notification_id' value='" . $notification['id'] . "'>
                    <button type='submit'>Delete</button>
                  </form>";
            echo "</div>";
        }
    } else {
        echo "<p>No notifications.</p>";
    }
    ?>
</div>
<?php include 'footer.php';

/* --- End of notifications.php --- */

/* --- Start of post.php --- */
include 'header.php';
require 'includes/database.php';
require 'includes/sanitize.php'; // Include the sanitization function

$post_id = isset($_GET['id']) ? filter_var($_GET['id'], FILTER_VALIDATE_INT) : 0;
$page = isset($_GET['page']) ? filter_var($_GET['page'], FILTER_VALIDATE_INT) : 1;

function getUserClass($user_role)
{
    switch ($user_role) {
        case 'admin':
        case 'owner':
            return 'admin-owner';
        case 'editor':
            return 'editor-user';
        default:
            return 'regular-user';
    }
}

function time_ago($datetime)
{
    $time = strtotime($datetime);
    $time_difference = time() - $time;

    if ($time_difference < 1) {
        return 'just now';
    }
    $condition = array(
        12 * 30 * 24 * 60 * 60 => 'year',
        30 * 24 * 60 * 60 => 'month',
        24 * 60 * 60 => 'day',
        60 * 60 => 'hour',
        60 => 'minute',
        1 => 'second'
    );

    foreach ($condition as $secs => $str) {
        $d = $time_difference / $secs;

        if ($d >= 1) {
            $r = round($d);
            return $r . ' ' . $str . ($r > 1 ? 's' : '') . ' ago';
        }
    }
}

if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['delete_comment']) && isset($_POST['comment_id'])) {
    // CSRF token validation
    if (!isset($_POST['csrf_token']) || $_POST['csrf_token'] !== $_SESSION['csrf_token']) {
        die('CSRF token validation failed');
    }

    $comment_id = filter_var($_POST['comment_id'], FILTER_VALIDATE_INT);
    $comment_owner_query = $pdo->prepare("SELECT user_id FROM comments WHERE id = ?");
    $comment_owner_query->execute([$comment_id]);
    $comment_owner_id = $comment_owner_query->fetchColumn();

    if ($_SESSION['user_id'] == $comment_owner_id || $_SESSION['user_role'] === 'admin') {
        $delete_stmt = $pdo->prepare("DELETE FROM comments WHERE id = ?");
        if ($delete_stmt->execute([$comment_id])) {
            echo "Comment deleted successfully!";
        } else {
            error_log("Failed to delete comment ID $comment_id by user ID {$_SESSION['user_id']}");
            echo "An error occurred. Please try again later.";
        }
    } else {
        echo "You do not have permission to delete this comment.";
    }
    exit;
}

if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['edit_comment']) && isset($_POST['comment_id']) && isset($_POST['content'])) {
    // CSRF token validation
    if (!isset($_POST['csrf_token']) || $_POST['csrf_token'] !== $_SESSION['csrf_token']) {
        die('CSRF token validation failed');
    }

    $comment_id = filter_var($_POST['comment_id'], FILTER_VALIDATE_INT);
    $content = htmlspecialchars(trim($_POST['content']), ENT_QUOTES, 'UTF-8');
    $comment_owner_query = $pdo->prepare("SELECT user_id FROM comments WHERE id = ?");
    $comment_owner_query->execute([$comment_id]);
    $comment_owner_id = $comment_owner_query->fetchColumn();

    if ($_SESSION['user_id'] == $comment_owner_id || $_SESSION['user_role'] === 'admin') {
        $update_stmt = $pdo->prepare("UPDATE comments SET content = ? WHERE id = ?");
        if ($update_stmt->execute([$content, $comment_id])) {
            echo "Comment updated successfully!";
        } else {
            error_log("Failed to update comment ID $comment_id by user ID {$_SESSION['user_id']}");
            echo "An error occurred. Please try again later.";
        }
    } else {
        echo "You do not have permission to edit this comment.";
    }
    exit;
}

if ($post_id > 0) {
    if (!isset($_SESSION['viewed_posts'])) {
        $_SESSION['viewed_posts'] = [];
    }

    if (!in_array($post_id, $_SESSION['viewed_posts'])) {
        $pdo->exec("UPDATE posts SET views = views + 1 WHERE id = $post_id");
        $_SESSION['viewed_posts'][] = $post_id;
    }

    $stmt = $pdo->prepare("SELECT posts.title, posts.content, posts.thumbnail, posts.voiceover_url, users.displayname AS author, users.role AS user_role, posts.views 
                           FROM posts 
                           JOIN users ON posts.user_id = users.id 
                           WHERE posts.id = ?");
    $stmt->execute([$post_id]);
    $post = $stmt->fetch(PDO::FETCH_ASSOC);

    if ($post) {
        $content = sanitize_html2(htmlspecialchars_decode($post['content']));
        $pages = explode('<!-- pagebreak -->', $content);
        $total_pages = count($pages);
        $content_page = isset($pages[$page - 1]) ? $pages[$page - 1] : '';
        $userClass = getUserClass($post['user_role']);

        echo '<div class="post-container">';
        echo '<h1 class="post-title">' . htmlspecialchars($post['title'], ENT_QUOTES, 'UTF-8') . '</h1>';
        echo '<h4 class="post-author">By <span class="' . $userClass . '">' . htmlspecialchars($post['author'], ENT_QUOTES, 'UTF-8') . '</span> | Views: ' . htmlspecialchars($post['views'], ENT_QUOTES, 'UTF-8') . '</h4>';
        if ($post['thumbnail']) {
            echo '<img src="' . htmlspecialchars($post['thumbnail'], ENT_QUOTES, 'UTF-8') . '" alt="Post Image" class="post-thumbnail">';
        }


        // Check if there is a base voiceover URL
        if (!empty($post['voiceover_url'])) {
            // 1. Deconstruct the original URL to get the base name and extension
            $path_info = pathinfo($post['voiceover_url']);
            $base_filename = $path_info['dirname'] . '/' . $path_info['filename'];
            $extension = $path_info['extension'];

            // 2. Construct the page-specific filename
            // For page 1, we can use the original or the _p1 version for consistency
            $page_specific_filename = $base_filename . '_p' . $page . '.' . $extension;

            // 3. IMPORTANT: Check if the page-specific audio file actually exists on the server
            // Note: This requires the URL path to be a relative server path. 
            // Adjust $_SERVER['DOCUMENT_ROOT'] if your files are stored elsewhere.
            $server_path_to_audio = $_SERVER['DOCUMENT_ROOT'] . '/' . ltrim($page_specific_filename, '/');

            if (file_exists($server_path_to_audio)) {
                // Construct the VTT file path
                $vtt_filename = $base_filename . '_p' . $page . '.vtt';
                $server_path_to_vtt = $_SERVER['DOCUMENT_ROOT'] . '/' . ltrim($vtt_filename, '/');

                echo '<div class="post-voiceover">';
                echo '<audio id="post-audio-player" controls>';
                echo '<source src="' . htmlspecialchars($page_specific_filename, ENT_QUOTES, 'UTF-8') . '" type="audio/mpeg">';

                // Add the track element if the VTT file exists
                if (file_exists($server_path_to_vtt)) {
                    echo '<track label="English" kind="subtitles" srclang="en" src="' . htmlspecialchars($vtt_filename, ENT_QUOTES, 'UTF-8') . '" default>';
                }

                echo 'Your browser does not support the audio element.';
                echo '</audio>';
                echo '</div>';
            }
        }

        // Pagination controls
        echo '<div class="pagination" style="display: flex; justify-content: space-between; align-items: center; padding: 35px 0;">';
        if ($page > 1) {
            echo '<a href="post.php?id=' . $post_id . '&page=' . ($page - 1) . '">Previous</a>';
        } else {
            echo '<span></span>';
        }
        echo '<span>Page ' . $page . ' of ' . $total_pages . '</span>';
        if ($page < $total_pages) {
            echo '<a href="post.php?id=' . $post_id . '&page=' . ($page + 1) . '">Next</a>';
        }
        echo '</div>';

        // We add an ID to the content wrapper to easily target it with JS
        echo '<div id="post-content-wrapper" class="post-content">' . nl2br_skip($content_page) . '</div>';

        // Pagination controls
        echo '<div class="pagination" style="display: flex; justify-content: space-between; align-items: center;">';
        if ($page > 1) {
            echo '<a href="post.php?id=' . $post_id . '&page=' . ($page - 1) . '">Previous</a>';
        } else {
            echo '<span></span>';
        }
        echo '<span>Page ' . $page . ' of ' . $total_pages . '</span>';
        if ($page < $total_pages) {
            echo '<a href="post.php?id=' . $post_id . '&page=' . ($page + 1) . '">Next</a>';
        }
        echo '</div>';

        if (isset($_SESSION['user_id'])) {
            echo '<form id="commentForm" class="comment-form">';
            echo '<textarea oninput="autoExpand(this)" name="comment" required placeholder="Add a comment..."></textarea>';
            echo '<input type="hidden" name="csrf_token" value="' . $csrf_token . '">';
            echo '<button type="button" id="submitComment">Comment</button>';
            echo '</form>';
        } else {
            echo '<p>Please <a href="login.php">Login</a> to make a comment.</p>';
        }

        echo '<h3 class="comments-title">Comments</h3>';
        echo '<div class="comments-section" id="commentsSection">';

        $comments_stmt = $pdo->prepare("SELECT comments.id, comments.content, comments.user_id, comments.created_at, users.displayname AS author, users.role AS user_role 
                                        FROM comments 
                                        JOIN users ON comments.user_id = users.id 
                                        WHERE comments.post_id = ? AND comments.parent_id IS NULL");
        $comments_stmt->execute([$post_id]);

        while ($comment = $comments_stmt->fetch(PDO::FETCH_ASSOC)) {
            $commentUserClass = getUserClass($comment['user_role']);
            $timeAgo = time_ago($comment['created_at']);

            echo '<div class="comment" data-comment-id="' . htmlspecialchars($comment['id'], ENT_QUOTES, 'UTF-8') . '">';
            echo '<strong class="' . $commentUserClass . '">' . htmlspecialchars($comment['author'], ENT_QUOTES, 'UTF-8') . '</strong> <span class="time-ago">' . $timeAgo . '</span>';
            echo '<p class="comment-content">' . nl2br(htmlspecialchars($comment['content'], ENT_QUOTES, 'UTF-8')) . '</p>';

            // Display edit and delete buttons if the user is the comment owner or an admin
            if (isset($_SESSION['user_id']) && ($_SESSION['user_id'] == $comment['user_id'] || $_SESSION['user_role'] === 'admin' || $_SESSION['user_role'] === 'owner')) {
                echo '<button type="button" class="editComment" data-comment-id="' . htmlspecialchars($comment['id'], ENT_QUOTES, 'UTF-8') . '">Edit</button>';
                echo '<button type="button" class="deleteComment" data-comment-id="' . htmlspecialchars($comment['id'], ENT_QUOTES, 'UTF-8') . '">Delete</button>';
            }

            // Display reply form for logged-in users
            if (isset($_SESSION['user_id'])) {
                echo '<form class="reply-form">';
                echo '<textarea oninput="autoExpand(this)" required placeholder="Reply to this comment..."></textarea>';
                echo '<input type="hidden" name="csrf_token" value="' . $csrf_token . '">';
                echo '<button type="button" class="submitReply" style="display: block;" data-parent-id="' . htmlspecialchars($comment['id'], ENT_QUOTES, 'UTF-8') . '">Reply</button>';
                echo '</form>';
            }

            // Fetch and display replies to this comment
            $replies_stmt = $pdo->prepare("SELECT comments.id, comments.content, comments.user_id, comments.created_at, users.displayname AS author, users.role AS user_role 
                                           FROM comments 
                                           JOIN users ON comments.user_id = users.id 
                                           WHERE comments.parent_id = ?");
            $replies_stmt->execute([$comment['id']]);

            while ($reply = $replies_stmt->fetch(PDO::FETCH_ASSOC)) {
                $replyTimeAgo = time_ago($reply['created_at']);
                $replyUserClass = getUserClass($reply['user_role']);

                echo '<div class="comment reply" data-comment-id="' . htmlspecialchars($reply['id'], ENT_QUOTES, 'UTF-8') . '">';
                echo '<strong class="' . $replyUserClass . '">' . htmlspecialchars($reply['author'], ENT_QUOTES, 'UTF-8') . '</strong> <span class="time-ago">' . $replyTimeAgo . '</span>';
                echo '<p class="comment-content">' . nl2br(htmlspecialchars($reply['content'], ENT_QUOTES, 'UTF-8')) . '</p>';

                // Display edit and delete buttons for replies if the user is the owner or an admin
                if (isset($_SESSION['user_id']) && ($_SESSION['user_id'] == $reply['user_id'] || $_SESSION['user_role'] === 'admin')) {
                    echo '<button type="button" class="editComment" data-comment-id="' . htmlspecialchars($reply['id'], ENT_QUOTES, 'UTF-8') . '">Edit</button>';
                    echo '<button type="button" class="deleteComment" data-comment-id="' . htmlspecialchars($reply['id'], ENT_QUOTES, 'UTF-8') . '">Delete</button>';
                }

                echo '</div>';
            }

            echo '</div>'; // Close original comment div
        }

        if ($comments_stmt->rowCount() == 0) {
            echo '<p>No Comments Yet.</p>';
        }
        echo '</div>'; // Close comments section

        echo '</div>'; // Close post container
    } else {
        echo '<p>Post not found.</p>';
    }
} else {
    echo '<p>Invalid post ID.</p>';
}
include 'footer.php';
?>

<script>
    document.addEventListener("DOMContentLoaded", function() {
        const audio = document.getElementById('post-audio-player');
        const contentWrapper = document.getElementById('post-content-wrapper');

        // Only run the script if the audio player and content exist on the page
        if (audio && contentWrapper) {
            console.log('✅ Audio player and content wrapper found.');

            // This is a more robust way to handle the track
            const setupTrackEvents = (track) => {
                console.log('🎉 Track found! Mode:', track.mode, 'Label:', track.label);
                track.mode = 'hidden'; // Don't show browser-native subtitles

                let lastHighlightedElement = null;

                track.oncuechange = () => {
                    // Remove highlight from the previous element
                    if (lastHighlightedElement) {
                        // Un-highlight by replacing the span with its text content
                        const parent = lastHighlightedElement.parentNode;
                        parent.replaceChild(document.createTextNode(lastHighlightedElement.textContent), lastHighlightedElement);
                        parent.normalize(); // Merges adjacent text nodes
                        lastHighlightedElement = null;
                    }

                    // Find the currently active cue
                    const activeCue = track.activeCues[0];

                    if (activeCue) {
                        const cueText = activeCue.text;
                        console.log('🎤 Cue change! Searching for text:', cueText);

                        const treeWalker = document.createTreeWalker(contentWrapper, NodeFilter.SHOW_TEXT);
                        let currentNode;
                        while (currentNode = treeWalker.nextNode()) {
                            const text = currentNode.nodeValue;
                            const index = text.indexOf(cueText);

                            if (index !== -1) {
                                console.log('✅ Text found! Highlighting now.');
                                const range = document.createRange();
                                range.setStart(currentNode, index);
                                range.setEnd(currentNode, index + cueText.length);

                                const highlightSpan = document.createElement('span');
                                highlightSpan.className = 'highlight'; // Make sure you have a .highlight CSS class!
                                range.surroundContents(highlightSpan);

                                lastHighlightedElement = highlightSpan;
                                break; // Stop searching once found
                            }
                        }
                    }
                };
            };

            // Check if tracks are already loaded (can happen if VTT file loads fast)
            if (audio.textTracks.length > 0) {
                console.log('Tracks were already loaded.');
                setupTrackEvents(audio.textTracks[0]);
            } else {
                // Otherwise, wait for the track to be added
                console.log('Waiting for track to be added...');
                audio.textTracks.onaddtrack = (event) => {
                    setupTrackEvents(event.track);
                };
            }
        } else {
            console.error('❌ Could not find audio player or content wrapper.');
        }

        const userId = <?php echo isset($_SESSION['user_id']) ? json_encode($_SESSION['user_id']) : 'null'; ?>;

        if (userId) {
            // Handle main comment submission
            document.getElementById('submitComment').addEventListener('click', function() {
                const commentText = document.querySelector('#commentForm textarea').value;
                const csrfToken = document.querySelector('#commentForm input[name="csrf_token"]').value;

                if (!commentText) {
                    alert('Please enter a comment.');
                    return;
                }

                const formData = new FormData();
                formData.append('comment', commentText);
                formData.append('user_id', userId);
                formData.append('post_id', <?php echo $post_id; ?>);
                formData.append('csrf_token', csrfToken);

                fetch('/includes/comments/submit_comment.php', {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const commentsSection = document.getElementById('commentsSection');
                            const noCommentsMsg = commentsSection.querySelector('p');
                            if (noCommentsMsg && noCommentsMsg.textContent === 'No Comments Yet.') {
                                commentsSection.removeChild(noCommentsMsg);
                            }

                            const newComment = document.createElement('div');
                            newComment.classList.add('comment');
                            newComment.innerHTML = `<strong>You</strong><span class="time-ago">just now</span><p class="comment-content">${commentText}</p>`;
                            commentsSection.appendChild(newComment);

                            document.querySelector('#commentForm textarea').value = '';
                        } else {
                            alert(data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Error submitting comment.');
                    });
            });

            // Handle reply submission
            document.querySelectorAll('.submitReply').forEach(function(button) {
                button.addEventListener('click', function() {
                    const replyForm = this.closest('.reply-form');
                    const replyText = replyForm.querySelector('textarea').value;
                    const parentId = this.dataset.parentId;
                    const csrfToken = replyForm.querySelector('input[name="csrf_token"]').value;

                    if (!replyText) {
                        alert('Please enter a reply.');
                        return;
                    }

                    const formData = new FormData();
                    formData.append('comment', replyText);
                    formData.append('user_id', userId);
                    formData.append('post_id', <?php echo $post_id; ?>);
                    formData.append('parent_id', parentId);
                    formData.append('csrf_token', csrfToken);

                    fetch('/includes/comments/submit_comment.php', {
                            method: 'POST',
                            body: formData
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                const replySection = replyForm.parentElement;
                                const newReply = document.createElement('div');
                                newReply.classList.add('comment', 'reply');
                                newReply.innerHTML = `<strong>You</strong><span class="time-ago">just now</span><p class="comment-content">${replyText}</p>`;
                                replySection.appendChild(newReply);

                                replyForm.querySelector('textarea').value = '';
                            } else {
                                alert(data.message);
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            alert('Error submitting reply.');
                        });
                });
            });

            // Handle comment deletion
            document.querySelectorAll('.deleteComment').forEach(function(button) {
                button.addEventListener('click', function() {
                    const commentId = this.dataset.commentId;

                    if (confirm('Are you sure you want to delete this comment?')) {
                        const formData = new FormData();
                        formData.append('comment_id', commentId);
                        formData.append('delete_comment', true);
                        formData.append('csrf_token', '<?php echo $csrf_token; ?>');

                        fetch('/includes/comments/delete_comment.php', {
                                method: 'POST',
                                body: formData
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    const commentElement = document.querySelector(`[data-comment-id="${commentId}"]`);
                                    if (commentElement) {
                                        commentElement.remove();
                                    }
                                } else {
                                    alert(data.message);
                                }
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                alert('Error deleting comment.');
                            });
                    }
                });
            });

            // Handle comment editing
            document.querySelectorAll('.editComment').forEach(function(button) {
                button.addEventListener('click', function() {
                    const commentId = this.dataset.commentId;
                    const commentElement = document.querySelector(`[data-comment-id="${commentId}"]`);
                    const commentContentElement = commentElement.querySelector('.comment-content');

                    // Convert the comment text to an editable div (contenteditable)
                    commentContentElement.setAttribute('contenteditable', 'true');
                    commentContentElement.focus();

                    // Change the edit button to a save button
                    this.textContent = 'Save';
                    this.classList.add('saveEdit');

                    // Handle the save action
                    this.addEventListener('click', function() {
                        const newText = commentContentElement.textContent.trim();
                        const csrfToken = '<?php echo $csrf_token; ?>';

                        const formData = new FormData();
                        formData.append('comment_id', commentId);
                        formData.append('edit_comment', true);
                        formData.append('content', newText);
                        formData.append('csrf_token', csrfToken);

                        fetch('/includes/comments/edit_comment.php', {
                                method: 'POST',
                                body: formData
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    // Remove contenteditable attribute
                                    commentContentElement.removeAttribute('contenteditable');

                                    // Change the save button back to an edit button
                                    this.textContent = 'Edit';
                                    this.classList.remove('saveEdit');
                                } else {
                                    alert(data.message);
                                }
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                alert('Error updating comment.');
                            });
                    }, {
                        once: true
                    }); // Ensure the event listener runs only once
                });
            });
        } else {
            //alert('User is not logged in. Please log in to comment or reply.');
        }
    });
</script>

/* --- End of post.php --- */

/* --- Start of register.php --- */
ini_set('display_errors', 1);
error_reporting(E_ALL);

require 'includes/database.php';   // Include the database connection
require 'includes/sanitize.php';   // Include the sanitization function

// Handle form submission
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    // Collect raw inputs
    $rawUsername    = trim($_POST['username'] ?? '');
    $rawDisplayName = trim($_POST['displayname'] ?? '');
    $rawEmail       = trim($_POST['email'] ?? '');
    $rawPassword    = $_POST['password'] ?? '';

    // Validate length & format
    $errors = [];

    // Username
    if ($rawUsername === '') {
        $errors[] = "Username is required.";
    } elseif (mb_strlen($rawUsername) > 25) {
        $errors[] = "Username must be 25 characters or fewer.";
    }

    // Display name
    if ($rawDisplayName === '') {
        $errors[] = "Full name is required.";
    } elseif (mb_strlen($rawDisplayName) > 50) {
        $errors[] = "Full name must be 50 characters or fewer.";
    }

    // Email
    if ($rawEmail === '') {
        $errors[] = "Email is required.";
    } elseif (mb_strlen($rawEmail) > 50) {
        $errors[] = "Email must be 50 characters or fewer.";
    } elseif (!filter_var($rawEmail, FILTER_VALIDATE_EMAIL)) {
        $errors[] = "Email address is not valid.";
    }

    // Password length: require between 8 and 128
    $pwLen = mb_strlen($rawPassword);
    if ($pwLen === 0) {
        $errors[] = "Password is required.";
    } elseif ($pwLen < 8) {
        $errors[] = "Password must be at least 8 characters.";
    } elseif ($pwLen > 128) {
        $errors[] = "Password cannot exceed 128 characters.";
    }

    // If any errors, don't proceed
    if (!empty($errors)) {
        $error_message = implode('<br>', $errors);
    } else {
        // Sanitize for HTML output
        $username    = htmlspecialchars(sanitize_html($rawUsername),    ENT_QUOTES, 'UTF-8');
        $displayname = htmlspecialchars(sanitize_html($rawDisplayName), ENT_QUOTES, 'UTF-8');
        $email       = htmlspecialchars($rawEmail,                      ENT_QUOTES, 'UTF-8');
        $password    = $rawPassword;
        $role        = "member";

        // Check uniqueness
        $stmt = $pdo->prepare("SELECT 1 FROM users WHERE username = ? OR email = ?");
        $stmt->execute([$username, $email]);
        if ($stmt->fetch()) {
            $error_message = "Username or Email already exists!";
        } else {
            // Hash & insert
            $password_hash = password_hash($password, PASSWORD_DEFAULT);
            $insert_stmt = $pdo->prepare("
                INSERT INTO users (username, displayname, email, password, role)
                VALUES (?, ?, ?, ?, ?)
            ");
            if ($insert_stmt->execute([$username, $displayname, $email, $password_hash, $role])) {
                $success_message = "User registered successfully!";
            } else {
                $error_message = "Failed to register user.";
            }
        }
    }
}
?>
<?php include 'header.php'; ?>

<div class="register-container">
    <h1>Register User</h1>
    <?php if (!empty($error_message)): ?>
        <p style="color: red;"><?= $error_message ?></p>
    <?php endif; ?>
    <?php if (!empty($success_message)): ?>
        <p style="color: green;"><?= $success_message ?></p>
    <?php endif; ?>
    <form method="POST" action="register.php">
        <label for="username">Username:</label>
        <input type="text" id="username" name="username" placeholder="Desired username (ex: starshooter10)" required><br>

        <label for="displayname">Full Name (First &amp; Last Name):</label>
        <input type="text" id="displayname" name="displayname" placeholder="John Smith" required><br>

        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required><br>

        <label for="password">Password:</label>
        <input type="password" id="password" name="password" required><br>

        <button type="submit">Register</button>
    </form>
</div>

<?php include 'footer.php'; ?>

<!-- Include the JavaScript code -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const usernameInput    = document.getElementById('username');
        const displaynameInput = document.getElementById('displayname');
        const emailInput       = document.getElementById('email');
        const passwordInput    = document.getElementById('password');
        const submitButton     = document.querySelector('button');

        // Set max lengths
        usernameInput.maxLength    = 25;
        displaynameInput.maxLength = 50;
        emailInput.maxLength       = 50;
        passwordInput.maxLength    = 128;

        // Disable submit until all fields non-empty
        function checkFormValidity() {
            submitButton.disabled = !(  
                usernameInput.value &&
                displaynameInput.value &&
                emailInput.value &&
                passwordInput.value
            );
        }
        [usernameInput, displaynameInput, emailInput, passwordInput]
            .forEach(el => el.addEventListener('input', checkFormValidity));

        // Helper: find sibling by class
        function findSiblingByClass(el, className) {
            let node = el.nextElementSibling;
            while (node) {
                if (node.classList && node.classList.contains(className)) {
                    return node;
                }
                node = node.nextElementSibling;
            }
            return null;
        }

        // Tooltip helpers
        function showTooltip(el, msg) {
            let tt = findSiblingByClass(el, 'char-limit-tooltip');
            if (!tt) {
                tt = document.createElement('div');
                tt.classList.add('char-limit-tooltip');
                tt.style.position = 'absolute';
                tt.style.backgroundColor = '#f8d7da';
                tt.style.color = '#721c24';
                tt.style.padding = '5px';
                tt.style.borderRadius = '5px';
                tt.style.top = (el.offsetTop - 30) + 'px';
                tt.style.left = el.offsetLeft + 'px';
                tt.style.zIndex = '1000';
                el.insertAdjacentElement('afterend', tt);
            }
            tt.textContent = msg;
        }

        function hideTooltip(el) {
            const tt = findSiblingByClass(el, 'char-limit-tooltip');
            if (tt) tt.remove();
        }

        // Strength indicator helpers
        function updateStrengthIndicator(el, text, color) {
            let ind = findSiblingByClass(el, 'password-strength-indicator');
            if (!ind) {
                ind = document.createElement('span');
                ind.classList.add('password-strength-indicator');
                ind.style.display = 'inline-block';
                ind.style.marginLeft = '10px';
                el.insertAdjacentElement('afterend', ind);
            }
            ind.textContent = text;
            ind.style.color = color;
        }

        function removeStrengthIndicator(el) {
            const ind = findSiblingByClass(el, 'password-strength-indicator');
            if (ind) ind.remove();
        }

        // Field-specific length/format checks
        usernameInput.addEventListener('input', () => {
            if (usernameInput.value.length > 25) showTooltip(usernameInput, 'Maximum 25 characters allowed');
            else hideTooltip(usernameInput);
        });
        displaynameInput.addEventListener('input', () => {
            if (displaynameInput.value.length > 50) showTooltip(displaynameInput, 'Maximum 50 characters allowed');
            else hideTooltip(displaynameInput);
        });
        emailInput.addEventListener('input', () => {
            if (emailInput.value.length > 50) showTooltip(emailInput, 'Maximum 50 characters allowed');
            else hideTooltip(emailInput);
        });

        // Password length tooltip and strength
        passwordInput.addEventListener('input', () => {
            const len = passwordInput.value.length;
            if      (len > 128)      showTooltip(passwordInput, 'Maximum 128 characters allowed');
            else if (len > 0 && len <  8) showTooltip(passwordInput, 'Must be at least 8 characters');
            else                         hideTooltip(passwordInput);

            if (len === 0) {
                removeStrengthIndicator(passwordInput);
            } else {
                let text, color;
                if      (len >= 10) { text = 'Password Strength: Strong'; color = '#2ecc71'; }
                else if (len >=  6) { text = 'Password Strength: Medium'; color = '#f39c12'; }
                else                { text = 'Password Strength: Weak';   color = '#e74c3c'; }
                updateStrengthIndicator(passwordInput, text, color);
            }
        });

        // Initial disable
        submitButton.disabled = true;
    });
</script>

<style>
    .char-limit-tooltip {
        position: absolute;
        background-color: #f8d7da;
        color: #721c24;
        padding: 5px;
        border-radius: 5px;
        font-size: 12px;
        box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.2);
    }
    .password-strength-indicator {
        font-size: 0.9em;
    }
</style>


/* --- End of register.php --- */

/* --- Start of search.php --- */
require_once 'includes/database.php';
require_once 'base_config.php';

if (session_status() == PHP_SESSION_NONE) {
    session_start();
}
ini_set('display_errors', 1);
error_reporting(E_ALL);

// Check if the request came from the search bar in the header
/*if (!isset($_SERVER['HTTP_REFERER']) || strpos($_SERVER['HTTP_REFERER'], BASE_URL) !== 0) {
    // Redirect to home page or show an error message
    header("Location: " . BASE_URL . "index.php");
    exit;
}*/

$searchQuery = '';
$results = [];

if (isset($_GET['query'])) {
    $searchQuery = trim($_GET['query']);
    if (!empty($searchQuery)) {
        // Prepare and execute the search query using PDO
        $stmt = $pdo->prepare("SELECT title, content, created_at FROM posts WHERE title LIKE :query OR content LIKE :query");
        $searchParam = '%' . $searchQuery . '%';
        $stmt->bindParam(':query', $searchParam);
        $stmt->execute();

        // Fetch all results
        $results = $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
}
?>

<?php include 'header.php'; ?>

<div class="main-container">
    <main>
        <div class="search-results">
            <h1>Search Results for "<?php echo htmlspecialchars($searchQuery); ?>"</h1>
            <?php if (empty($results)) : ?>
                <p>No results found.</p>
            <?php else : ?>
                <ul>
                    <?php foreach ($results as $result) : ?>
                        <li>
                            <h2><?php echo htmlspecialchars($result['title']); ?></h2>
                            <p><em>Posted on: <?php echo htmlspecialchars($result['created_at']); ?></em></p>
                            <p><?php echo htmlspecialchars_decode(substr($result['content'], 0, 200)) . '...'; ?></p>
                        </li>
                    <?php endforeach; ?>
                </ul>
            <?php endif; ?>
        </div>
    </main>
</div>
<?php include 'footer.php';

/* --- End of search.php --- */

/* --- Start of setup.php --- */
ini_set('display_errors', 1);
error_reporting(E_ALL);
require 'includes/config.php';  // Include the configuration file

try {
    // Create a new PDO instance to connect to MySQL
    $pdo = new PDO("mysql:host=" . DB_HOST, DB_USER, DB_PASS);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    // Check if the database already exists
    $result = $pdo->query("SELECT COUNT(*) FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = '" . DB_NAME . "'");
    if ($result->fetchColumn() > 0) {
        echo "Database already exists. Setup is not required.";
    } else {
        // SQL commands to create database and tables
        $sql = <<<SQL
CREATE DATABASE IF NOT EXISTS `DB_NAME`;
USE `DB_NAME`;

CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) UNIQUE NOT NULL,
    displayname VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,  -- Add the email field and make it unique
    password VARCHAR(255) NOT NULL,
    role ENUM('admin', 'editor', 'member') DEFAULT 'member'
);

CREATE TABLE IF NOT EXISTS posts (
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    user_id INT NOT NULL,
    views INT DEFAULT 0,
    voiceover_url VARCHAR(255) NULL,
    FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE TABLE IF NOT EXISTS comments (
    id INT AUTO_INCREMENT PRIMARY KEY,
    post_id INT NOT NULL,
    user_id INT NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    parent_id INT DEFAULT NULL,
    FOREIGN KEY (post_id) REFERENCES posts(id),
    FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE TABLE IF NOT EXISTS roster_data (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    devotion ENUM('red', 'blue', 'yellow', 'green') DEFAULT 'red',
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS questions (
    id INT AUTO_INCREMENT PRIMARY KEY,
    question TEXT NOT NULL,
    num_options TINYINT NOT NULL DEFAULT 4,
    option_struct VARCHAR(255) NOT NULL DEFAULT 'ssss',
    options JSON NOT NULL,
    correct_option VARCHAR(255) NOT NULL,
    test_ids JSON NOT NULL
);


CREATE TABLE IF NOT EXISTS tests (
    id INT AUTO_INCREMENT PRIMARY KEY,
    test_name VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    num_questions INT NOT NULL DEFAULT 10
);

CREATE TABLE IF NOT EXISTS scores (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    test_id INT NOT NULL,
    score INT NOT NULL,
    taken_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (test_id) REFERENCES tests(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS user_tests (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    test_id INT NOT NULL,
    assigned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (test_id) REFERENCES tests(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS notifications (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    message VARCHAR(255) NOT NULL,
    is_read BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE magazine_articles (
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    author VARCHAR(255) NOT NULL,
    image_url VARCHAR(255) NOT NULL,
    article_url VARCHAR(255) NOT NULL,
    published_date DATE NOT NULL,
    issue VARCHAR(50) NOT NULL
);
SQL;

        // Replace placeholders with actual constant values
        $sql = str_replace("DB_NAME", DB_NAME, $sql);

        // Execute SQL commands
        $pdo->exec($sql);
        echo "Database and tables created successfully!";
    }
} catch (PDOException $e) {
    die("Database error: " . $e->getMessage());
}

/* --- End of setup.php --- */

/* --- Start of test.php --- */
session_start();
require 'includes/config.php';
require_once 'base_config.php';

ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);
?>

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" type="text/css" href="/styles/tests.css">
</head>

<body>
    <header>DivineWord Test</header>

    <?php

    if (!isset($_SESSION['user_id'])) {
        die("Unauthorized access.");
    }

    try {
        $pdo = new PDO("mysql:host=" . DB_HOST . ";dbname=" . DB_NAME, DB_USER, DB_PASS);
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            if (isset($_SESSION['test_started'], $_SESSION['test_completed']) && $_SESSION['test_started'] && $_SESSION['test_completed']) {
                // Handle form submission
                $answers = $_POST['answers'];
                $test_id = $_POST['test_id'];
                $username = $_SESSION['username'];

                $stmt = $pdo->prepare("SELECT test_name, num_questions FROM tests WHERE id = ?");
                $stmt->execute([$test_id]);
                $test_info = $stmt->fetch(PDO::FETCH_ASSOC);

                if (!empty($test_info)) {

                    $test_name = $test_info['test_name'];
                    $total_questions = $test_info['num_questions'];

                    $correct_count = 0;

                    if (!empty($answers)) {
                        foreach ($answers as $question_id => $user_answer) {
                            $stmt = $pdo->prepare("SELECT correct_option FROM questions WHERE id = ?");
                            $stmt->execute([$question_id]);
                            $correct_answer = $stmt->fetchColumn();

                            if ($user_answer === $correct_answer) {
                                $correct_count++;
                            }
                        }
                    }

                    $score = $correct_count; // Modify scoring logic if needed
                    $percentage = ((int)$score / (int)$total_questions) * 100;

                    $stmt = $pdo->prepare("INSERT INTO scores (user_id, test_id, score, percent) VALUES (?, ?, ?, ?)");
                    $stmt->execute([$_SESSION['user_id'], $test_id, $score, $percentage]);

                    echo "<p>Your score is : $score.</p>";

                    if ($percentage < 80) {
                        echo '<p>You <span style="color:red;">FAILED</span> with an overall rate of: <span style="color:red;">' . $percentage . '%</span>.</p>';
                    } else {
                        echo '<p>You <span style="color:green;">PASSED</span> with an overall rate of: <span style="color:green;">' . $percentage . '%</span>.</p>';
                    }

                    $to = 'admin@divineword.co.uk';
                    $subject = "{$username} has completed the test '{$test_name}'";
                    $message = "{$username} has completed the test '{$test_name}' with a score of {$score} ({$percentage}%)";
                    $headers = 'From: admin@divineword.co.uk' . "\r\n" .
                        'Reply-To: admin@divineword.co.uk' . "\r\n" .
                        'X-Mailer: PHP/' . phpversion();

                    if (mail($to, $subject, $message, $headers)) {
                        echo '<p>The Administrator has been notified successfully.</p>';
                    } else {
                        echo '<p>Failed to notify Administrator.</p>';
                    }
                } else {
                    echo 'Test Unknown or Invalid.';
                }

                // Unset session variables related to the test
                unset($_SESSION['test_started'], $_SESSION['test_completed']);
            } else {
                unset($_SESSION['test_started'], $_SESSION['test_completed']);
                die("Test session is invalid or has not been properly started.");
            }
        } else {
            // Display the test
            $test_id = $_GET['test_id'];

            $stmt = $pdo->prepare("SELECT COUNT(*) FROM user_tests WHERE user_id = ? AND test_id = ?");
            $stmt->execute([$_SESSION['user_id'], $test_id]);
            if ($stmt->fetchColumn() == 0) {
                die("You are not assigned to this test.");
            }

            // Remove the test assignment
            $stmt = $pdo->prepare("DELETE FROM user_tests WHERE user_id = ? AND test_id = ?");
            $stmt->execute([$_SESSION['user_id'], $test_id]);

            // Set the session flag indicating the test has started
            $_SESSION['test_started'] = true;
            $_SESSION['test_completed'] = false;

            // Fetch the number of questions for the test
            $stmt = $pdo->prepare("SELECT num_questions FROM tests WHERE id = ?");
            $stmt->execute([$test_id]);
            $num_questions = $stmt->fetchColumn();

            if (!$num_questions) {
                die("Invalid test configuration.");
            }

            // Fetch questions assigned to the test using JSON search and random selection
            $stmt = $pdo->prepare("SELECT id, question, options FROM questions WHERE JSON_CONTAINS(test_ids, :test_id, '$') ORDER BY RAND() LIMIT :num_questions");
            $stmt->bindValue(':test_id', json_encode((int)$test_id), PDO::PARAM_STR);
            $stmt->bindValue(':num_questions', $num_questions, PDO::PARAM_INT);
            $stmt->execute();
            $questions = $stmt->fetchAll(PDO::FETCH_ASSOC);

            if (empty($questions)) {
                die("No questions found for this test.");
            }

            // Set the timer
            $_SESSION['start_time'] = time();
            $test_duration = 60 * 5; // 5 minutes, adjust as needed
            $_SESSION['end_time'] = $_SESSION['start_time'] + $test_duration;

            echo '<div id="timer"></div>';
            echo '<form method="POST" onsubmit="window.formSubmitting = true;">';
            echo '<input type="hidden" name="test_id" value="' . htmlspecialchars($test_id) . '">';
            foreach ($questions as $index => $question) {
                $options = json_decode($question['options'], true);
                echo '<div class="question">';
                echo '<p>' . ($index + 1) . '. ' . htmlspecialchars($question['question']) . '</p>';
                foreach ($options as $key => $option) {
                    echo '<label class="answer"><input type="radio" name="answers[' . $question['id'] . ']" value="' . $key . '">' . htmlspecialchars($option) . '</label><br>';
                }
                echo '</div>';
            }
            echo '<input type="submit" value="Submit">';
            echo '</form>';

            // Set the session flag indicating the test can be completed
            $_SESSION['test_completed'] = true;
        }
    } catch (PDOException $e) {
        die("Database error: " . $e->getMessage());
    }
    ?>

    <footer></footer>

    <script>
        window.formSubmitting = false;

        window.onbeforeunload = function() {
            if (!window.formSubmitting) {
                return "Are you sure you want to leave? Your progress will be lost.";
            }
        };

        window.addEventListener('beforeunload', function(e) {
            if (!window.formSubmitting) {
                var xhr = new XMLHttpRequest();
                xhr.open('GET', '/includes/tests/unset_test_session.php', true);
                xhr.send();
            }
        });

        document.addEventListener('DOMContentLoaded', (event) => {
            document.addEventListener('copy', (e) => {
                e.preventDefault();
                alert('Copying is not allowed.');
            });

            document.addEventListener('cut', (e) => {
                e.preventDefault();
                alert('Cutting is not allowed.');
            });

            document.addEventListener('paste', (e) => {
                e.preventDefault();
                alert('Pasting is not allowed.');
            });

            // Disable text selection
            document.addEventListener('selectstart', (e) => {
                e.preventDefault();
            });

            // Disable right-click context menu
            document.addEventListener('contextmenu', (e) => {
                e.preventDefault();
                alert('Right-click is not allowed.');
            });
        });

        function startTimer(duration, display) {
            var timer = duration,
                minutes, seconds;
            setInterval(function() {
                minutes = parseInt(timer / 60, 10);
                seconds = parseInt(timer % 60, 10);

                minutes = minutes < 10 ? "0" + minutes : minutes;
                seconds = seconds < 10 ? "0" + seconds : seconds;

                display.textContent = minutes + ":" + seconds;

                if (--timer < 0) {
                    timer = duration;
                    alert("Time's up! The test will be submitted automatically.");
                    document.querySelector('form').submit();
                }
            }, 1000);
        }

        window.onload = function() {
            var endTime = <?= $_SESSION['end_time'] ?>;
            var currentTime = Math.floor(Date.now() / 1000);
            var timeLeft = endTime - currentTime;

            if (timeLeft <= 0) {
                alert("Time's up! The test will be submitted automatically.");
                document.querySelector('form').submit();
            } else {
                var display = document.querySelector('#timer');
                startTimer(timeLeft, display);
            }
        };
    </script>

</body>

</html>

/* --- End of test.php --- */

/* --- Start of admin\admin_panel.php --- */
// Start the session and check if the user is authenticated and is an admin.
session_start();
if (!isset($_SESSION['user_role']) || !in_array($_SESSION['user_role'], ['admin', 'editor'])) {
    header('Location: /login.php'); // Redirect to login if not authenticated as admin.
    exit();
}

// Include header file
include '../header.php';
?>

<div class="admin-container">
    <h1>Admin Dashboard</h1>
    <p>Welcome to the admin dashboard. Use the links below to manage the site:</p>
    <ul class="admin-links">
        <li><a href="create_post.php">Create New Post</a></li>
        <li><a href="edit_post.php">Edit Post</a></li>
        <li><a href="edit_video.php">Edit Video of the Week</a></li>
        <?php if (isset($_SESSION['user_role']) && $_SESSION['user_role'] === 'admin') : ?>
            <li><a href="manage_users.php">Manage Users</a></li>
            <li><a href="test_manage.php">Manage Tests</a></li>
        <?php endif; ?>
        <!-- Additional links for other admin tasks can be added here -->
    </ul>
</div>

<?php
// Include footer file
include '../footer.php';

/* --- End of admin\admin_panel.php --- */

/* --- Start of admin\create_post.php --- */
session_start();
require '../includes/database.php';
require '../includes/sanitize.php'; // Include the sanitization function

if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_SESSION['user_id']) && $_SESSION['user_role'] === 'admin') {
    $title = sanitize_html($_POST['title']);
    $content = sanitize_html2($_POST['content']);
    $user_id = $_SESSION['user_id'];
    $thumbnail = null;

    // Handle file upload
    if (isset($_FILES['thumbnail']) && $_FILES['thumbnail']['error'] == 0) {
        $target_directory = "../images/uploads/";
        $target_file = $target_directory . basename($_FILES["thumbnail"]["name"]);
        if (move_uploaded_file($_FILES["thumbnail"]["tmp_name"], $target_file)) {
            $thumbnail = $target_file;
        } else {
            echo "<p>Error Thumbnail: Failed to move uploaded file.</p>";
        }
    } else {
        echo "<p>Error Thumbnail: " . $_FILES['thumbnail']['error'] . "</p>";
    }

    // Prepare the SQL statement to include user_id
    $insert_stmt = $pdo->prepare("INSERT INTO posts (title, content, user_id, thumbnail) VALUES (?, ?, ?, ?)");
    if ($insert_stmt->execute([$title, $content, $user_id, $thumbnail])) {
        echo "<p>Post added successfully!</p>";
    } else {
        echo "<p>Failed to add post.</p>";
    }
} else {
    echo "<p>Please login to submit posts.</p>";
}
?>

<?php include '../header.php'; ?>
<div class="admin-content">
    <h2 style="text-align: center;">Create New Post</h2>
    <form class="admin-form" method="POST" action="create_post.php" enctype="multipart/form-data">
        <label for="title">Title:</label>
        <input type="text" id="title" name="title" required><br>
        <label for="content">Content:</label>
        <textarea id="content" name="content" rows="10" required></textarea><br>
        <label for="thumbnail">Thumbnail:</label>
        <input type="file" id="thumbnail" name="thumbnail"><br>
        <input type="submit" value="Create Post">
    </form>
</div>
<?php include '../footer.php';

/* --- End of admin\create_post.php --- */

/* --- Start of admin\edit_post.php --- */
session_start();
// Check if admin is logged in
if (!isset($_SESSION['user_role']) || $_SESSION['user_role'] !== 'admin') {
    header('Location: /login.php');
    exit();
}
require_once '../base_config.php';
require 'includes/database.php';
require 'includes/sanitize.php'; // Include the sanitization function

// Fetch all posts for dropdown
$stmt = $pdo->prepare("SELECT id, title, DATE_FORMAT(created_at, '%Y-%m-%d %H:%i') as formatted_date FROM posts ORDER BY created_at DESC");
$stmt->execute();
$posts = $stmt->fetchAll(PDO::FETCH_ASSOC);

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    if (isset($_POST['delete']) && isset($_POST['post_id'])) {
        // Delete post
        $post_id = $_POST['post_id'];
        // Fetch existing thumbnail to delete the file
        $existing_thumbnail_stmt = $pdo->prepare("SELECT thumbnail FROM posts WHERE id = ?");
        $existing_thumbnail_stmt->execute([$post_id]);
        $existing_thumbnail = $existing_thumbnail_stmt->fetchColumn();

        // Delete the post
        $delete_stmt = $pdo->prepare("DELETE FROM posts WHERE id = ?");
        if ($delete_stmt->execute([$post_id])) {
            // Delete the thumbnail file
            if ($existing_thumbnail && file_exists($existing_thumbnail)) {
                unlink($existing_thumbnail);
            }
            echo "<p>Post deleted successfully!</p>";
        } else {
            echo "<p>Failed to delete post.</p>";
        }
    } else if (isset($_POST['post_id'])) {
        // Update post
        $post_id = $_POST['post_id'];
        $title = sanitize_html($_POST['title']);
        $content = sanitize_html2($_POST['content']);

        // Fetch existing thumbnail
        $existing_thumbnail_stmt = $pdo->prepare("SELECT thumbnail FROM posts WHERE id = ?");
        $existing_thumbnail_stmt->execute([$post_id]);
        $existing_thumbnail = $existing_thumbnail_stmt->fetchColumn();

        // Initialize $thumbnail to the existing thumbnail
        $thumbnail = $existing_thumbnail;

        if (isset($_FILES['thumbnail']) && $_FILES['thumbnail']['error'] == 0) {
            // Delete old thumbnail file if it exists
            if ($existing_thumbnail && file_exists($existing_thumbnail)) {
                unlink($existing_thumbnail);
            }

            // Move the new uploaded file
            $target_directory = "../images/uploads/";

            // Ensure unique file name to avoid overwriting
            $file_extension = pathinfo($_FILES["thumbnail"]["name"], PATHINFO_EXTENSION);
            $new_filename = uniqid('thumb_', true) . '.' . $file_extension;

            $target_file = $target_directory . $new_filename;

            if (move_uploaded_file($_FILES["thumbnail"]["tmp_name"], $target_file)) {
                $thumbnail = $target_file;
            }
        }

        // Update the post in the database
        $update_stmt = $pdo->prepare("UPDATE posts SET title = ?, content = ?, thumbnail = ? WHERE id = ?");
        if ($update_stmt->execute([$title, $content, $thumbnail, $post_id])) {
            echo "<p>Post updated successfully!</p>";
        } else {
            echo "<p>Failed to update post.</p>";
        }
    }
}

include '../header.php';
?>
<div class="admin-content">
    <h2>Edit Post</h2>
    <form method="POST" action="edit_post.php" enctype="multipart/form-data" class="admin-form">
        <div class="form-group">
            <label for="post_id">Choose a post to edit:</label>
            <select id="post_id" name="post_id" onchange="loadPostData(this.value)" class="form-control">
                <option value="">Select a post</option>
                <?php foreach ($posts as $post): ?>
                    <option value="<?= $post['id'] ?>"><?= htmlspecialchars($post['title']) ?> - <?= $post['formatted_date'] ?></option>
                <?php endforeach; ?>
            </select>
        </div>
        
        <div class="form-group">
            <label for="title">Title:</label>
            <input type="text" id="title" name="title" required class="form-control">
        </div>
        
        <div class="form-group">
            <label for="content">Content:</label>
            <textarea id="content" name="content" rows="10" required class="form-control"></textarea>
        </div>
        
        <div class="form-group">
            <label for="current_thumbnail">Current Thumbnail:</label>
            <div id="current_thumbnail"></div>
        </div>

        <div class="form-group">
            <label for="thumbnail">Thumbnail (optional):</label>
            <input type="file" id="thumbnail" name="thumbnail" class="form-control">
        </div>
        
        <button type="submit" class="btn btn-primary">Update Post</button>
        <button type="submit" name="delete" class="btn btn-danger" onclick="return confirm('Are you sure you want to delete this post?');">Delete Post</button>
    </form>
</div>
<script>
function loadPostData(postId) {
    if (postId) {
        fetch('/includes/posts/get_post_data.php?post_id=' + postId)
            .then(response => response.json())
            .then(data => {
                document.getElementById('title').value = decodeHtmlEntities(data.title);
                document.getElementById('content').value = decodeHtmlEntities(data.content);

                // Handle thumbnail
                var currentThumbnailDiv = document.getElementById('current_thumbnail');
                if (data.thumbnail) {
                    // Adjust the path if necessary
                    var thumbnailPath = data.thumbnail.replace('../', '/');
                    currentThumbnailDiv.innerHTML = '<img src="' + thumbnailPath + '" alt="Current Thumbnail" style="max-width: 200px;">';
                } else {
                    currentThumbnailDiv.innerHTML = 'No thumbnail.';
                }
            });
    } else {
        document.getElementById('title').value = '';
        document.getElementById('content').value = '';
        document.getElementById('current_thumbnail').innerHTML = '';
    }
}

function decodeHtmlEntities(str) {
    var textarea = document.createElement('textarea');
    textarea.innerHTML = str;
    return textarea.value;
}
</script>
<?php include '../footer.php';

/* --- End of admin\edit_post.php --- */

/* --- Start of admin\edit_video.php --- */
// Start the session and check if the user is logged in as an admin
session_start();
if (!isset($_SESSION['user_id']) || $_SESSION['user_role'] !== 'admin') {
    header('Location: /login.php');
    exit();
}

$video_file = '../includes/featured_video.txt';
$success = '';
$error = '';

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $new_link = trim($_POST['video_link']);
    if (!empty($new_link)) {
        file_put_contents($video_file, $new_link);
        $success = 'Video link updated successfully!';
    } else {
        $error = 'Please provide a valid video link.';
    }
}
?>

<?php include '../header.php'; ?>
<h1>Edit Featured Video of the Week</h1>
<?php if ($success) : ?>
    <p style="color: green;"><?php echo $success; ?></p>
<?php endif; ?>
<?php if ($error) : ?>
    <p style="color: red;"><?php echo $error; ?></p>
<?php endif; ?>
<form action="" method="POST">
    <label for="video_link">Video Link:</label>
    <input type="text" id="video_link" name="video_link" value="<?php echo file_exists($video_file) ? trim(file_get_contents($video_file)) : ''; ?>">
    <button type="submit">Update Video</button>
</form>
<?php include '../footer.php';

/* --- End of admin\edit_video.php --- */

